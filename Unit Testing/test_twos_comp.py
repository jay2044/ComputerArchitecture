import os
import sys

current_dir = os.path.dirname(__file__)
sys.path.append(os.path.join(current_dir, '../'))
from binaryArith.binaryArith import *


# all 4 bit conversions for twos complement
four_bit_tests = [
    ["0000", "0000"],
    ["0001", "1111"], # 0
    ["0010", "1110"], # 2
    ["0011", "1101"], # 3
    ["0100", "1100"], # 4
    ["0101", "1011"], # 5
    ["0110", "1010"], # 6
    ["0111", "1001"]  # 7
]

eight_bit_tests = [
    ["00000000", "00000000"], # 0
    ["00000001", "11111111"], # 1
    ["00000010", "11111110"], # 2
    ["00000011", "11111101"], # 3
    ["00000100", "11111100"], # 4
    ["00000101", "11111011"], # 5
    ["00000110", "11111010"], # 6
    ["00000111", "11111001"], # 7
    ["00001000", "11111000"], # 8
    ["00001001", "11110111"], # 9
    ["00001010", "11110110"], # 10
    ["00001011", "11110101"], # 11
    ["00001100", "11110100"], # 12
    ["00001101", "11110011"], # 13
    ["00001110", "11110010"], # 14
    ["00001111", "11110001"], # 15
    ["00010000", "11110000"], # 16
    ["00010001", "11101111"], # 17
    ["00010010", "11101110"], # 18
    ["00010011", "11101101"], # 19
    ["00010100", "11101100"], # 20
    ["00010101", "11101011"], # 21
    ["00010110", "11101010"], # 22
    ["00010111", "11101001"], # 23
    ["00011000", "11101000"], # 24
    ["00011001", "11100111"], # 25
    ["00011010", "11100110"], # 26
    ["00011011", "11100101"], # 27
    ["00011100", "11100100"], # 28
    ["00011101", "11100011"], # 29
    ["00011110", "11100010"], # 30
    ["00011111", "11100001"], # 31
    ["00100000", "11100000"], # 32
    ["00100001", "11011111"], # 33
    ["00100010", "11011110"], # 34
    ["00100011", "11011101"], # 35
    ["00100100", "11011100"], # 36
    ["00100101", "11011011"], # 37
    ["00100110", "11011010"], # 38
    ["00100111", "11011001"], # 39
    ["00101000", "11011000"], # 40
    ["00101001", "11010111"], # 41
    ["00101010", "11010110"], # 42
    ["00101011", "11010101"], # 43
    ["00101100", "11010100"], # 44
    ["00101101", "11010011"], # 45
    ["00101110", "11010010"], # 46
    ["00101111", "11010001"], # 47
    ["00110000", "11010000"], # 48
    ["00110001", "11001111"], # 49
    ["00110010", "11001110"], # 50
    ["00110011", "11001101"], # 51
    ["00110100", "11001100"], # 52
    ["00110101", "11001011"], # 53
    ["00110110", "11001010"], # 54
    ["00110111", "11001001"], # 55
    ["00111000", "11001000"], # 56
    ["00111001", "11000111"], # 57
    ["00111010", "11000110"], # 58
    ["00111011", "11000101"], # 59
    ["00111100", "11000100"], # 60
    ["00111101", "11000011"], # 61
    ["00111110", "11000010"], # 62
    ["00111111", "11000001"], # 63
    ["01000000", "11000000"], # 64
    ["01000001", "10111111"], # 65
    ["01000010", "10111110"], # 66
    ["01000011", "10111101"], # 67
    ["01000100", "10111100"], # 68
    ["01000101", "10111011"], # 69
    ["01000110", "10111010"], # 70
    ["01000111", "10111001"], # 71
    ["01001000", "10111000"], # 72
    ["01001001", "10110111"], # 73
    ["01001010", "10110110"], # 74
    ["01001011", "10110101"], # 75
    ["01001100", "10110100"], # 76
    ["01001101", "10110011"], # 77
    ["01001110", "10110010"], # 78
    ["01001111", "10110001"], # 79
    ["01010000", "10110000"], # 80
    ["01010001", "10101111"], # 81
    ["01010010", "10101110"], # 82
    ["01010011", "10101101"], # 83
    ["01010100", "10101100"], # 84
    ["01010101", "10101011"], # 85
    ["01010110", "10101010"], # 86
    ["01010111", "10101001"], # 87
    ["01011000", "10101000"], # 88
    ["01011001", "10100111"], # 89
    ["01011010", "10100110"], # 90
    ["01011011", "10100101"], # 91
    ["01011100", "10100100"], # 92
    ["01011101", "10100011"], # 93
    ["01011110", "10100010"], # 94
    ["01011111", "10100001"], # 95
    ["01100000", "10100000"], # 96
    ["01100001", "10011111"], # 97
    ["01100010", "10011110"], # 98
    ["01100011", "10011101"], # 99
    ["01100100", "10011100"], # 100
    ["01100101", "10011011"], # 101
    ["01100110", "10011010"], # 102
    ["01100111", "10011001"], # 103
    ["01101000", "10011000"], # 104
    ["01101001", "10010111"], # 105
    ["01101010", "10010110"], # 106
    ["01101011", "10010101"], # 107
    ["01101100", "10010100"], # 108
    ["01101101", "10010011"], # 109
    ["01101110", "10010010"], # 110
    ["01101111", "10010001"], # 111
    ["01110000", "10010000"], # 112
    ["01110001", "10001111"], # 113
    ["01110010", "10001110"], # 114
    ["01110011", "10001101"], # 115
    ["01110100", "10001100"], # 116
    ["01110101", "10001011"], # 117
    ["01110110", "10001010"], # 118
    ["01110111", "10001001"], # 119
    ["01111000", "10001000"], # 120
    ["01111001", "10000111"], # 121
    ["01111010", "10000110"], # 122
    ["01111011", "10000101"], # 123
    ["01111100", "10000100"], # 124
    ["01111101", "10000011"], # 125
    ["01111110", "10000010"], # 126
    ["01111111", "10000001"], # 127
]


def test_twosComp():
    tests = four_bit_tests + eight_bit_tests
    for values in tests:
        assert twosComp(values[0], len(values[0])) == values[1]
